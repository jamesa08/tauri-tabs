import React from "react";
import { PhysicalPosition, PhysicalSize, WebviewWindow, appWindow } from "@tauri-apps/api/window";
import { dragAsWindow, onElementDrop, CallbackPayload } from "./libs/drag-window.tsx";
import "./App.css";
import { redirect } from "react-router-dom";
import DragItem from "./Tab.tsx";
import { createRoot } from "react-dom/client";

interface ElementDropPayload {
    id: string;
}

// check if cursor is inside the window
// returns True if cursor is inside the window, False otherwise
const checkCursorInsideWindow = async (appWindow: WebviewWindow, cursorX: number, cursorY: number): Promise<boolean> => {
    const position: PhysicalPosition = await appWindow.outerPosition();
    const size: PhysicalSize = await appWindow.outerSize();
    const scale: number = await appWindow.scaleFactor();
    const { x: windowX, y: windowY } = position.toLogical(scale);
    const { width, height } = size.toLogical(scale);

    // get window boundaries
    const windowLeft = windowX;
    const windowTop = windowY;
    const windowRight = windowX + width;
    const windowBottom = windowY + height;

    // debug
    // console.log({ windowX, windowY }, { width, height });
    // console.log({ cursorX, cursorY });

    // if cursor is inside the window, return
    if (cursorX >= windowLeft && cursorX <= windowRight && cursorY >= windowTop && cursorY <= windowBottom) {
        return true;
    }

    return false;
};

function DragZone() {
    const dropZoneRef = React.useRef<HTMLDivElement>(null);

    React.useEffect(() => {
        appendItem("drag-1");
        // appendItem("drag-2");
        // appendItem("drag-3");

        let unlisten: any;

        const setupElementDropListener = async () => {
            const unlisten = await onElementDrop((data: ElementDropPayload) => {
                console.log("element dropped", data);
                // appendItem(data.id);
            });
            return unlisten;
        };

        setupElementDropListener()
            .then((fn) => {
                unlisten = fn;
            })
            .catch((error) => {
                console.error("Failed to setup element drop listener", error);
            });

        return () => {
            if (unlisten) {
                unlisten();
            }
        };
    }, []);

    // const appendItem = (id: string) => {
    //     if (dropZoneRef.current) {
    //         const dragEl = document.createElement("div");
    //         dragEl.setAttribute("draggable", "true");
    //         dragEl.id = id;
    //         dragEl.className = "drag-item";
    //         dragEl.innerText = `Drag me ${id}`;
    //         dropZoneRef.current.appendChild(dragEl);
    //         dragEl.ondragstart = dragHandler;
    //     }
    // };

    const appendItem = (id: string) => {
        console.log("I AM CALLED");
        if (dropZoneRef.current) {
            // Create and append the DragItem component dynamically
            const newDragItem = document.createElement("div");
            newDragItem.id = `drag-item-${id}`;
            dropZoneRef.current.appendChild(newDragItem);

            const root = createRoot(newDragItem);
            root.render(<DragItem id={id} dragHandler={dragHandler} />);
        }
    };

    const dragHandler = async (event: DragEvent) => {
        event.preventDefault();

        const el = event.target as HTMLDivElement;
        try {
            await dragAsWindow(el, async (payload: CallbackPayload) => {
                try {
                    // remove dragging class , aside: why is this behavior like this?
                    el.classList.remove("dragging");

                    console.log("creating window");

                    // only create window if the drag was outside of the drop zone
                    // call the function in dragHandler
                    if (await checkCursorInsideWindow(appWindow, payload.cursorPos.x as number, payload.cursorPos.y as number)) {
                        return;
                    }

                    console.log("cursor is outside the window");

                    // create window
                    await createWindowByHtmlTemplate(el, payload);

                    el.remove();
                } catch (e) {
                    console.error(e);
                }
            });
        } catch (err) {
            console.error("failed to drag", err);
        }

        // add dragging class
        el.classList.add("dragging");
    };

    const createWindowByHtmlTemplate = async (el: HTMLDivElement, payload: CallbackPayload) => {
        const newWindow = new WebviewWindow(el.id, {
            url: `/#/window/${el.id}`,
            title: `New Window ${el.id}`,
            width: el.clientWidth,
            height: el.clientHeight + 40, // 20: titlebar height
            x: (payload.cursorPos.x as number) - el.clientWidth / 2,
            y: (payload.cursorPos.y as number) - 20,
        });

        newWindow.once(`loaded-${el.id}`, async () => {
            console.log("window loaded");
            newWindow.emit(`init-${el.id}`, {
                id: el.id,
            });
        });

        redirect(`/#/window/${el.id}`);
    };

    return <div ref={dropZoneRef} className="drag-zone"></div>;
}

export default DragZone;
